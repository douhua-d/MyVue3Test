// // WebAssembly
//
// 高级语言（C/C++/Rust等）
// ↓
// 编译为 WebAssembly
//         ↓
// .wasm 二进制文件
//         ↓
// 浏览器加载并执行


/**
 * 浏览器兼容性
 * 检查浏览器支持
 * Apply to index.tsx
 * }
 * 安全考虑
 * WASM 模块运行在沙箱环境中
 * 遵循同源策略
 * 注意内存安全
 * 文件大小
 * 考虑代码分割
 * 按需加载模块
 * 9. 未来发展
 * 线程支持
 * SharedArrayBuffer
 * Atomic 操作
 * 垃圾回收
 * 更好的内存管理
 * 与 JavaScript GC 集成
 * SIMD 支持
 * 向量运算
 * 并行处理
 *
 * WebAssembly 是一项强大的技术，特别适合需要高性能计算的 Web 应用。
 * 它与 JavaScript 的协同工作能够带来最佳的开发体验和运行性能。选择使用 WebAssembly 时，需要权衡开发复杂度和性能需求，
 * 在适当的场景下使用它能够带来显著的性能提升。
 *
 *
 * 实际项目建议
 * 评估需求
 * 是否真的需要 WebAssembly？
 * 性能提升是否显著？
 * 开发维护成本如何？
 *
 *
 * 总的来说，WebAssembly 模块的来源取决于具体项目需求和团队结构：
 * 如果是复杂算法或已有代码库，通常由后端团队提供
 * 如果是简单的性能优化，前端团队可以自主开发
 * 大型项目中可能两种方式并存
 * 关键是要根据实际需求选择合适的开发方式，并建立良好的团队协作流程。
 */